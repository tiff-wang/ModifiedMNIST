# -*- coding: utf-8 -*-
"""NN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nDaDYB9zli5nQt8vD0wR_ESW4ywvWNwT
"""

import tensorflow as tf
tf.test.gpu_device_name()

import math
import random
import numpy as np 

# sigmoid function
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# derivative of our sigmoid function, in terms of the output (i.e. y)
def dsigmoid(x):
    return 1.0 - x**2

# Make a matrix 
def matrix(m, n, fill=0.0):
    return np.zeros(shape=(m,n)) + fill

# Make a random matrix
def rand_matrix(m, n, a=0, b=1):
	return np.random.rand(m, n) * (b - a) + a

class NN:
    def __init__(self, ni, nh, no):
        # number of input, hidden, and output nodes
        self.ni = ni + 1
        #only 1 bias node?
        self.nh = nh
        self.no = no
        

        # activations for nodes
        self.ai = [1.0]*self.ni
        self.ah = [1.0]*self.nh
        self.ao = [1.0]*self.no

        # bias vectors 
        self.bh = np.zeros((1, self.nh))
        self.bo = np.zeros((1, self.no))

        # create weights
        # default to range (-0.2, 0.2)
        self.wi = rand_matrix(self.ni, self.nh, -0.2, 0.2)
        self.wo = rand_matrix(self.nh, self.no, -2.0, 2.0)

        # last change in weights for momentum
        self.ci = matrix(self.ni, self.nh)
        self.co = matrix(self.nh, self.no)

    def propagate(self, inputs):
      if(len(inputs) != self.ni -1):
        raise ValueError('wrong number of inputs')

        # input layers activations
        for i in range(self.ni-1):
          self.ai[i] = inputs[i]

        # hidden layers activations
        #bh is bias of hidden layers
        self.ah = np.dot(ai, wi) + self.bh

        # hidden output 
        self.oh = np.tanh(self.ah)

        # output layers activations
        self.ao = np.dot(ah, wo) + self.bo

        #h output layers output 
        self.oo = sigmoid(np.ao)

        outputs = {
        "ah": ah,
        "ao": ao,
        "oh": oh,
        "oo": oo,
        }

        return outputs


    def backPropagate(self, targets, N, M):
        if len(targets) != self.no:
            raise ValueError('wrong number of target values')

        # calculate error terms for output
        output_deltas = [0.0] * self.no
        for k in range(self.no):
            error = targets[k]-self.ao[k]
            output_deltas[k] = dsigmoid(self.ao[k]) * error

        # calculate error terms for hidden
        hidden_deltas = [0.0] * self.nh
        for j in range(self.nh):
            error = 0.0
            for k in range(self.no):
                error = error + output_deltas[k]*self.wo[j][k]
            hidden_deltas[j] = dsigmoid(self.ah[j]) * error

        # update output weights
        for j in range(self.nh):
            for k in range(self.no):
                change = output_deltas[k]*self.ah[j]
                self.wo[j][k] = self.wo[j][k] + N*change + M*self.co[j][k]
                self.co[j][k] = change
                #print N*change, M*self.co[j][k]

        # update input weights
        for i in range(self.ni):
            for j in range(self.nh):
                change = hidden_deltas[j]*self.ai[i]
                self.wi[i][j] = self.wi[i][j] + N*change + M*self.ci[i][j]
                self.ci[i][j] = change

        # calculate error
        error = 0.0
        for k in range(len(targets)):
            error = error + 0.5*(targets[k]-self.ao[k])**2
        return error
      
    def train(self, x, y, iterations = 20000, N = 0.5, M = 0.1):
        # N: learning rate
        # M: momentum factor
        #print(range(iterations))
        for i in range(iterations):
            error = 0.0
            for j in (range(len(x))):
                inputs = x[j]
                targets = y[j]
                #print(len(inputs))
                self.propagate(inputs)
                error = error + self.backPropagate(targets, N, M)
            if i % 200 == 0:
                print('error %-.5f' % error)

!pip install -U -q PyDrive

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# 1. Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)
from google.colab import auth
auth.authenticate_user()

from googleapiclient.discovery import build
drive_service = build('drive', 'v3')

#@title Default title text
import numpy as np
import scipy.misc

URL_ENDPOINT = "http://cs.mcgill.ca/~ksinha4/datasets/kaggle/"

train_x = np.loadtxt(URL_ENDPOINT+"train_x.csv", delimiter=",")
train_y = np.loadtxt(URL_ENDPOINT+"train_y.csv", delimiter=",")
test_x = np.loadtxt(URL_ENDPOINT+"test_x.csv", delimiter=",")


train_x = train_x.reshape(-1, 64, 64) # reshape 
train_y = train_y.reshape(-1, 1) 
test_x = test_x.reshape(-1, 64, 64)

print(len(train_x))
print(len(train_y))
print(len(test_x))

print(type(test_x))
print(test_x)

def demo():

    # create a network with 64 input, 1 hidden, and one output nodes
    n = NN(64,64, 1)
    # train it with some patterns
    n.train(train_x, train_y)
    # test it

demo()

print(len(train_x[0]))